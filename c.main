#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "hardware/timer.h"

// Definição dos pinos dos LEDs
#define LED_VERMELHO 11
#define LED_AMARELO 12
#define LED_VERDE 13

// Estado atual do semáforo
volatile int estado_semaforo = 0;

// Função de call-back do temporizador
bool repeating_timer_callback(struct repeating_timer *t) {
    // Desliga todos os LEDs antes de alternar
    gpio_put(LED_VERMELHO, 0);
    gpio_put(LED_AMARELO, 0);
    gpio_put(LED_VERDE, 0);

    // Alterna o estado do semáforo
    if (estado_semaforo == 0) {
        gpio_put(LED_VERMELHO, 1);  // Liga o vermelho
        estado_semaforo = 1;
    } else if (estado_semaforo == 1) {
        gpio_put(LED_AMARELO, 1);  // Liga o amarelo
        estado_semaforo = 2;
    } else {
        gpio_put(LED_VERDE, 1);  // Liga o verde
        estado_semaforo = 0;
    }

    return true; // Continua chamando o temporizador
}

int main() {
    // Inicializa a UART para saída de debug
    stdio_init_all();

    // Configuração dos LEDs como saída
    gpio_init(LED_VERMELHO);
    gpio_init(LED_AMARELO);
    gpio_init(LED_VERDE);
    
    gpio_set_dir(LED_VERMELHO, GPIO_OUT);
    gpio_set_dir(LED_AMARELO, GPIO_OUT);
    gpio_set_dir(LED_VERDE, GPIO_OUT);

    // Inicializa o semáforo no vermelho
    gpio_put(LED_VERMELHO, 1);
    gpio_put(LED_AMARELO, 0);
    gpio_put(LED_VERDE, 0);
    
    // Criação do temporizador periódico
    struct repeating_timer timer;
    add_repeating_timer_ms(-3000, repeating_timer_callback, NULL, &timer);

    // Loop principal imprimindo a cada 1 segundo
    while (1) {
        printf("Semáforo rodando... Estado atual: %d\n", estado_semaforo);
        sleep_ms(1000);
    }

    return 0;
}
